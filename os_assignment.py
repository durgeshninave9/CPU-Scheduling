# -*- coding: utf-8 -*-
"""OS ASSIGNMENT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/161dC9azxNF_pPovNAikGuBKkaOY5MMax
"""

# Durgesh Ninave
# Roll No. : 20BCE173

import json
import numpy as np
import pandas as pd
from prettytable import PrettyTable
f=open("input.txt","r")


def avgtat(tat):
    sum=0
    for i in tat:
        sum+=i
    avg=sum/(i)
    print("Average Turn Around Time : ",avg)

def avgwt(wt):
    sum=0
    for i in wt:
        sum+=i
    avg=sum/(i)
    print("Average Waiting Time : ",avg)

with open("input.txt") as file:
    l=file.readlines()


data=f.read()
n=len(l)
f.close()

st=data.replace('\n',' ').split(' ')

pr=[0]*n
at=[0]*n
bt=[0]*n
ct=[0]*n
tat=[0]*n
wt=[0]*n

a=0
b=0
c=0
for i in range(len(st)):
    if i%3==0:
        pr[a]=int(st[i])
        a+=1
    elif i%3==1:
        at[b]=int(st[i])
        b+=1
    else:
        bt[c]=int(st[i])
        c+=1

for i in range(n):
    for j in range(0,n-i-1):
        if at[j]>at[j+1]:
            pr[j],pr[j+1]=pr[j+1],pr[j]
            at[j],at[j+1]=at[j+1],at[j]
            bt[j],bt[j+1]=bt[j+1],bt[j]
            
for i in range(n):
    if i==0:
        ct[i]=(at[0]+bt[0])
    else:
        if at[i]<ct[i-1]:
            ct[i]=(ct[i-1]+bt[i])
        else:
            ct[i]=(at[i]+bt[i])
        
for i in range(n):
    tat[i]=ct[i]-at[i]
    wt[i]=tat[i]-bt[i]
    
table=PrettyTable(["Process Time","Arrival Time","Burst Time","Completion Time","Turn Around Time","Waiting Time"])
for i in range(n):
    table.add_row([pr[i],at[i],bt[i],ct[i],tat[i],wt[i]])

print(table)
print()

# for gant chart

print("+-------------------+-----------------+")
print("|              Gantt Chart            |")
print("+-------------------+-----------------+")
print()
print(' ',end='')
for i in range(n):
    j=0
    while j<bt[i]:
        print("--",end='')
        j+=1
    print(' ',end='')
print("\n|",end='')

for i in range(n):
    for j in range(bt[i]-1):
        print(" ",end='')
    print("P"+str(pr[i]),end='')
    for j in range(bt[i]-1):
        print(" ",end='')
    print("|",end='')
print()

print(' ',end='')
for i in range(n):
    j=0
    while j<bt[i]:
        print("--",end='')
        j+=1
    print(' ',end='')
print("\n",end='')

print("0",end='')
for i in range(n):
    for j in range(bt[i]):
        print("  ",end='')
    if ct[i]>9:
            print("\b",end='')
    print(ct[i],end='')
print("\n")

avgtat(tat)
avgwt(wt)

import json
import numpy as np
import pandas as pd
from prettytable import PrettyTable
f=open("input.txt","r")


def avgtat(tat):
    sum=0
    for i in tat:
        sum+=i
    avg=sum/(i)
    print("Average Turn Around Time : ",avg)

def avgwt(wt):
    sum=0
    for i in wt:
        sum+=i
    avg=sum/(i)
    print("Average Waiting Time : ",avg)

with open("input.txt") as file:
    l=file.readlines()


data=f.read()
n=len(l)
f.close()

st=data.replace('\n',' ').split(' ')

pr=[0]*n
at=[0]*n
bt=[0]*n
ct=[0]*n
tat=[0]*n
wt=[0]*n

a=0
b=0
c=0
for i in range(len(st)):
    if i%3==0:
        pr[a]=int(st[i])
        a+=1
    elif i%3==1:
        at[b]=int(st[i])
        b+=1
    else:
        bt[c]=int(st[i])
        c+=1
        
for i in range(n):
    for j in range(i,n-i-1):
        if at[j]>at[j+1]:
            at[j],at[j+1]=at[j+1],at[j]
            bt[j],bt[j+1]=bt[j+1],bt[j]
            pr[j],pr[j+1]=pr[j+1],pr[j]
            
ct[0]=at[0]+bt[0]

for i in range(1,n):
    temp=ct[i-1]
    low=bt[i]
    for j in range(i,n):
        if temp>at[j] and low>=bt[j]:
            low=bt[j]
            val=j
    ct[val]=temp+bt[val]
    at[val],at[i]=at[i],at[val]
    bt[val],bt[i]=bt[i],bt[val]
    ct[val],ct[i]=ct[i],ct[val]
    pr[val],pr[i]=pr[i],pr[val]

for i in range(n):
    tat[i]=ct[i]-at[i]
    wt[i]=tat[i]-bt[i]

table=PrettyTable(["Process Time","Arrival Time","Burst Time","Completion Time","Turn Around Time","Waiting Time"])
for i in range(n):
    table.add_row([pr[i],at[i],bt[i],ct[i],tat[i],wt[i]])

print(table)
print()

# for gant chart

print("+-------------------+-----------------+")
print("|              Gantt Chart            |")
print("+-------------------+-----------------+")
print()
print(' ',end='')
for i in range(n):
    j=0
    while j<bt[i]:
        print("--",end='')
        j+=1
    print(' ',end='')
print("\n|",end='')

for i in range(n):
    for j in range(bt[i]-1):
        print(" ",end='')
    print("P"+str(pr[i]),end='')
    for j in range(bt[i]-1):
        print(" ",end='')
    print("|",end='')
print()

print(' ',end='')
for i in range(n):
    j=0
    while j<bt[i]:
        print("--",end='')
        j+=1
    print(' ',end='')
print("\n",end='')

print("0",end='')
for i in range(n):
    for j in range(bt[i]):
        print("  ",end='')
    if ct[i]>9:
        print("\b",end='')
    print(ct[i],end='')
print("\n")

avgtat(tat)
avgwt(wt)

# srtf

import json
import numpy as np
import pandas as pd
from prettytable import PrettyTable
f=open("input.txt","r")


def avgtat(tat):
    sum=0
    for i in tat:
        sum+=i
    avg=sum/(i)
    print("Average Turn Around Time : ",avg)

def avgwt(wt):
    sum=0
    for i in wt:
        sum+=i
    avg=sum/(i)
    print("Average Waiting Time : ",avg)

with open("input.txt") as file:
    l=file.readlines()


data=f.read()
n=len(l)
f.close()

st=data.replace('\n',' ').split(' ')

pr=[0]*n
at=[0]*n
bt=[0]*n
ct=[0]*n
tat=[0]*n
rt=[0]*n
wt=[0]*n

a=0
b=0
c=0
for i in range(len(st)):
    if i%3==0:
        pr[a]=int(st[i])
        a+=1
    elif i%3==1:
        at[b]=int(st[i])
        b+=1
    else:
        bt[c]=int(st[i])
        c+=1

for i in range(n):
    rt[i]=bt[i]

comp=0
short=0
curr_t=0
mini=999999
chk=False
final=0
gantt=[]
list=[]
while(comp!=n):
    for i in range(n):
        if at[i]<=curr_t and rt[i]<mini and rt[i]>0:
            mini=rt[i]
            short=i
            chk=True

    if chk==False:
        curr_t+=1
        continue
    
    rt[short]-=1
    gantt.append(pr[short])
    
    if pr[short] not in list:
        list.append(pr[short])
        final+=curr_t
        final-=pr[short]
    mini=rt[short]
    
    if mini==0:
        mini=999999
        
    if rt[short]==0:
        comp+=1
        chk=False
        finishing_time=curr_t+1
        wt[short]=finishing_time-at[i]-bt[i]
        
        if wt[short]<0:
            wt[short]=0
    curr_t+=1
    
for i in range(n):
    tat[i]=bt[i]+wt[i]
    
table=PrettyTable(["Process Time","Arrival Time","Burst Time","Turn Around Time","Waiting Time"])
for i in range(n):
    table.add_row([pr[i],at[i],bt[i],tat[i],wt[i]])

print(table)
print()

print("+-------------------+-----------------+")
print("|              Gantt Chart            |")
print("+-------------------+-----------------+")
print()
print(' ',end='')
for i in range(len(gantt)):
    print('----',end='')
    print(' ',end='')
print("\n|",end='')

for i in range(len(gantt)):
    print(" P"+str(gantt[i]),end='')
    print(' |',end='')
print()

print(' ',end='')
for i in range(len(gantt)):
    print('----',end='')
    print(' ',end='')
print("\n",end='')

print("0",end='')
for i in range(len(gantt)):
    if i+1<10:
        print("   ",i+1,end='')
    else:
        print("  ",i+1,end='')
print("\n")

import json
import numpy as np
import pandas as pd
from prettytable import PrettyTable
f=open("input.txt","r")


def avgtat(tat):
    sum=0
    for i in tat:
        sum+=i
    avg=sum/(i)
    print("Average Turn Around Time : ",avg)

def avgwt(wt):
    sum=0
    for i in wt:
        sum+=i
    avg=sum/(i)
    print("Average Waiting Time : ",avg)

with open("input.txt") as file:
    l=file.readlines()


data=f.read()
n=len(l)
f.close()

st=data.replace('\n',' ').split(' ')

pr=[0]*n
at=[0]*n
bt=[0]*n
ct=[0]*n
tat=[0]*n
wt=[0]*n

a=0
b=0
c=0
for i in range(len(st)):
    if i%3==0:
        pr[a]=int(st[i])
        a+=1
    elif i%3==1:
        at[b]=int(st[i])
        b+=1
    else:
        bt[c]=int(st[i])
        c+=1

tq=int(input("Enter Time Quanta : "))

queue=[0]*n
complete=[False]*n
t=0
idx=0
tbt=[0]*n
chk=False

for i in range(n):
    tbt[i]=bt[i]

for i in range(n):
    tbt[i]=bt[i]
    
t=0;  
while t < at[0]:
    t+=1
queue[0] = 1  
    
while True:
    chk = True;
    for i in range(n):
        if tbt[i] != 0:
            chk = False
            break
            
    if chk:
        break
            
    for i in range(n):
        if(queue[i] == 0):
                break
        
        cnt = 0
        while (cnt < tq) and (tbt[queue[0]-1] > 0):
            tbt[queue[0]-1] -= 1
            t += 1
            cnt=cnt+1

            if t <= at[n-1]:
                narr = False
                j=idx+1
                for j in range(n):
                    if at[j] <= t:
                        if idx< j:
                            idx = j
                            narr = True
              
           
                if narr:
                    zidx=0;
                    for i in range(n):
                        if queue[i] == 0:
                            zidx = i
                            break
                                    
                    queue[zidx] = idx + 1
    

        if (tbt[queue[0] - 1] == 0) and (complete[queue[0] - 1] == False):
                tat[queue[0] - 1] = t
                complete[queue[0] - 1] = True
      
        idle = True;
        if queue[n - 1] == 0:
            for i in range(n):
                if queue[i]==0:
                    break
                if complete[queue[i]- 1] == False:
                    idle = False
        else:
            idle = False
        
        if idle:
            t=t+1;
            if t <= at[n-1]:
                narr=False
                j=idx+1
                for j in range(n):
                    if at[j] <= t:
                        if idx < j :
                            idx = j
                            narr = True
              
           
                if narr:
                    zidx=0;
                    for i in range(n):
                        if queue[i] == 0:
                            zidx = i;
                            break
                                    
                    queue[zidx] = idx + 1
                

        for i in range(n-1):
            if queue[i+1]==0:
                break
            temp = queue[i]
            queue[i] = queue[i+1]
            queue[i+1] = temp
    
for i in range(n):
        tat[i] = tat[i] - at[i]
        wt[i] = tat[i] - bt[i]
    
table=PrettyTable(["Process Time","Arrival Time","Burst Time","Turn Around Time","Waiting Time"])
for i in range(n):
    table.add_row([pr[i],at[i],bt[i],tat[i],wt[i]])

print(table)
print()

import json
import numpy as np
import pandas as pd
from prettytable import PrettyTable
f=open("input.txt","r")

# FOR FIND AVERAGE TURN AROUND TIME
def avgtat(tat):
    sum=0
    for i in tat:
        sum+=i
    avg=sum/(i)
    print("Average Turn Around Time : ",avg)

# FOR FIND AVERAGE WAITING TIME
def avgwt(wt):
    sum=0
    for i in wt:
        sum+=i
    avg=sum/(i)
    print("Average Waiting Time : ",avg)

# FUNCTION FOR FCFS
def fcfs():
    
    # FOR COUNT THE NUMBER OF LINES IN FILE
    with open("input.txt") as file:
        l=file.readlines()


    data=f.read() # READ THE WHOLE DATA FROM FILE
    n=len(l) # NO OF PROCESSES
    f.close()
     
    st=data.replace('\n',' ').split(' ')

    pr=[0]*n
    at=[0]*n
    bt=[0]*n
    ct=[0]*n
    tat=[0]*n
    wt=[0]*n

    a=0
    b=0
    c=0
    
    # FOR INSERT DATA IN LIST    
    for i in range(len(st)):
        if i%3==0:
            pr[a]=int(st[i])
            a+=1
        elif i%3==1:
            at[b]=int(st[i])
            b+=1
        else:
            bt[c]=int(st[i])
            c+=1
         
    # SORT BY ARRIVAL TIME     
    for i in range(n):
        for j in range(0,n-i-1):
            if at[j]>at[j+1]:
                pr[j],pr[j+1]=pr[j+1],pr[j]
                at[j],at[j+1]=at[j+1],at[j]
                bt[j],bt[j+1]=bt[j+1],bt[j]
        
    # FIND COMPLETION TIME         
    for i in range(n):
        if i==0:
            ct[i]=(at[0]+bt[0])
        else:
            if at[i]<ct[i-1]:
                ct[i]=(ct[i-1]+bt[i])
            else:
                ct[i]=(at[i]+bt[i])
                
    # FIND TAT AND WT                 
    for i in range(n):
        tat[i]=ct[i]-at[i]
        wt[i]=tat[i]-bt[i]

    # CREATE TABLE USING PRETTYTABLE        
    table=PrettyTable(["Process Time","Arrival Time","Burst Time","Completion Time","Turn Around Time","Waiting Time"])
    for i in range(n):
        table.add_row([pr[i],at[i],bt[i],ct[i],tat[i],wt[i]])

    print(table)
    print()

    # FOR GANTTCHART
    print("+-------------------+-----------------+")
    print("|              Gantt Chart            |")
    print("+-------------------+-----------------+")
    print()
    print(' ',end='')
    for i in range(n):
        j=0
        while j<bt[i]:
            print("--",end='')
            j+=1
        print(' ',end='')
    print("\n|",end='')

    for i in range(n):
        for j in range(bt[i]-1):
            print(" ",end='')
        print("P"+str(pr[i]),end='')
        for j in range(bt[i]-1):
            print(" ",end='')
        print("|",end='')
    print()

    print(' ',end='')
    for i in range(n):
        j=0
        while j<bt[i]:
            print("--",end='')
            j+=1
        print(' ',end='')
    print("\n",end='')

    print("0",end='')
    for i in range(n):
        for j in range(bt[i]):
            print("  ",end='')
        if ct[i]>9:
                print("\b",end='')
        print(ct[i],end='')
    print("\n")

    avgtat(tat)
    avgwt(wt)
    


# FUNCTION FOR SJF
def sjf():
    f=open("input.txt","r")
    
    # FOR COUNT THE NUMBER OF LINES IN FILE
    with open("input.txt") as file:
        l=file.readlines()


    data=f.read()
    n=len(l) # NO OF PROCESSES
    f.close() # READ THE WHOLE DATA FROM FILE

    st=data.replace('\n',' ').split(' ')

    pr=[0]*n
    at=[0]*n
    bt=[0]*n
    ct=[0]*n
    tat=[0]*n
    wt=[0]*n

    a=0
    b=0
    c=0
    
    # FOR INSERT DATA IN LIST    
    for i in range(len(st)):
        if i%3==0:
            pr[a]=int(st[i])
            a+=1
        elif i%3==1:
            at[b]=int(st[i])
            b+=1
        else:
            bt[c]=int(st[i])
            c+=1
            
    # SORT BY ARRIVAL TIME                  
    for i in range(n):
        for j in range(i,n-i-1):
            if at[j]>at[j+1]:
                at[j],at[j+1]=at[j+1],at[j]
                bt[j],bt[j+1]=bt[j+1],bt[j]
                pr[j],pr[j+1]=pr[j+1],pr[j]

    # STORE FIRST COMPLETION TIME                  
    ct[0]=at[0]+bt[0]

    for i in range(1,n):
        temp=ct[i-1]
        low=bt[i]
        for j in range(i,n):
            if temp>at[j] and low>=bt[j]:
                low=bt[j]
                val=j
        ct[val]=temp+bt[val]
        at[val],at[i]=at[i],at[val]
        bt[val],bt[i]=bt[i],bt[val]
        ct[val],ct[i]=ct[i],ct[val]
        pr[val],pr[i]=pr[i],pr[val]

    for i in range(n):
        tat[i]=ct[i]-at[i]
        wt[i]=tat[i]-bt[i]

    table=PrettyTable(["Process Time","Arrival Time","Burst Time","Completion Time","Turn Around Time","Waiting Time"])
    for i in range(n):
        table.add_row([pr[i],at[i],bt[i],ct[i],tat[i],wt[i]])

    print(table)
    print()

    # FOR GANTT CHART

    print("+-------------------+-----------------+")
    print("|              Gantt Chart            |")
    print("+-------------------+-----------------+")
    print()
    print(' ',end='')
    for i in range(n):
        j=0
        while j<bt[i]:
            print("--",end='')
            j+=1
        print(' ',end='')
    print("\n|",end='')

    for i in range(n):
        for j in range(bt[i]-1):
            print(" ",end='')
        print("P"+str(pr[i]),end='')
        for j in range(bt[i]-1):
            print(" ",end='')
        print("|",end='')
    print()

    print(' ',end='')
    for i in range(n):
        j=0
        while j<bt[i]:
            print("--",end='')
            j+=1
        print(' ',end='')
    print("\n",end='')

    print("0",end='')
    for i in range(n):
        for j in range(bt[i]):
            print("  ",end='')
        if ct[i]>9:
            print("\b",end='')
        print(ct[i],end='')
    print("\n")

    avgtat(tat)
    avgwt(wt)

def srtf():
    # srtf

    import json
    import numpy as np
    import pandas as pd
    from prettytable import PrettyTable
    f=open("input.txt","r")


    def avgtat(tat):
        sum=0
        for i in tat:
            sum+=i
        avg=sum/(i)
        print("Average Turn Around Time : ",avg)

    def avgwt(wt):
        sum=0
        for i in wt:
            sum+=i
        avg=sum/(i)
        print("Average Waiting Time : ",avg)

    with open("input.txt") as file:
        l=file.readlines()


    data=f.read()
    n=len(l)
    f.close()

    st=data.replace('\n',' ').split(' ')

    pr=[0]*n
    at=[0]*n
    bt=[0]*n
    ct=[0]*n
    tat=[0]*n
    rt=[0]*n
    wt=[0]*n

    a=0
    b=0
    c=0
    for i in range(len(st)):
        if i%3==0:
            pr[a]=int(st[i])
            a+=1
        elif i%3==1:
            at[b]=int(st[i])
            b+=1
        else:
            bt[c]=int(st[i])
            c+=1

    for i in range(n):
        rt[i]=bt[i]

    comp=0
    short=0
    curr_t=0
    mini=999999
    chk=False
    final=0
    gantt=[]
    list=[]
    while(comp!=n):
        for i in range(n):
            if at[i]<=curr_t and rt[i]<mini and rt[i]>0:
                mini=rt[i]
                short=i
                chk=True

        if chk==False:
            curr_t+=1
            continue

        rt[short]-=1
        gantt.append(pr[short])

        if pr[short] not in list:
            list.append(pr[short])
            final+=curr_t
            final-=pr[short]
        mini=rt[short]

        if mini==0:
            mini=999999

        if rt[short]==0:
            comp+=1
            chk=False
            finishing_time=curr_t+1
            wt[short]=finishing_time-at[i]-bt[i]

            if wt[short]<0:
                wt[short]=0
        curr_t+=1

    for i in range(n):
        tat[i]=bt[i]+wt[i]

    table=PrettyTable(["Process Time","Arrival Time","Burst Time","Turn Around Time","Waiting Time"])
    for i in range(n):
        table.add_row([pr[i],at[i],bt[i],tat[i],wt[i]])

    print(table)
    print()

    print("+-------------------+-----------------+")
    print("|              Gantt Chart            |")
    print("+-------------------+-----------------+")
    print()
    print(' ',end='')
    for i in range(len(gantt)):
        print('----',end='')
        print(' ',end='')
    print("\n|",end='')

    for i in range(len(gantt)):
        print(" P"+str(gantt[i]),end='')
        print(' |',end='')
    print()

    print(' ',end='')
    for i in range(len(gantt)):
        print('----',end='')
        print(' ',end='')
    print("\n",end='')

    print("0",end='')
    for i in range(len(gantt)):
        if i+1<10:
            print("   ",i+1,end='')
        else:
            print("  ",i+1,end='')
    print("\n")
    
while True:
    print("+----------------------+-----------------------+")
    print("|            SCHEDULING ALGORITHM              |")
    print("+----------------------+-----------------------+")
    print("| 1. FCFS                                      |")
    print("| 2. SJF                                       |")
    print("| 3. SRTF                                      |")
    print("| 4. RR                                        |")
    print("| 0. Exit                                      |")
    print("+----------------------+-----------------------+")
    
    choice=int(input("Enter Choice : "))
    
    if choice==0:
        break
    elif choice==1:
        fcfs()
    elif choice==2:
        sjf()
    elif choice==3:
        srtf()
#     elif chocie==4:
#         rr()
    else:
        print("Invalid Choice")

: